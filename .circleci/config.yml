# Javascript Node CircleCI 2.1 configuration file
#
# Check https://circleci.com/docs/2.0/language-javascript/ for more details
#
version: 2.1
orbs:
  cypress: cypress-io/cypress@1.23.0
jobs:
  test:
    docker:
      - image: citizenlabdotco/cl2-devops-front-buildenv
    working_directory: ~/cl2-front
    steps:
      - checkout
      # Download and cache dependencies
      - restore_cache:
          keys:
          - v1-npm-cache-{{ checksum "package.json" }}
          # fallback to using the latest cache if no exact match is found
          - v1-npm-cache-
      - run: npm ci
      - save_cache:
          paths:
            - /root/.npm
          key: v1-npm-cache-{{ checksum "package.json" }}
      - run:
          name: Run tests with JUnit as reporter
          environment:
            JEST_JUNIT_OUTPUT: "reports/junit/js-test-results.xml"
          command: npm run test:ci
      - store_test_results:
          path: ./reports/junit
      - store_artifacts:
          path: ./reports/junit

  lint:
    docker:
      - image: citizenlabdotco/cl2-devops-front-buildenv
    working_directory: ~/cl2-front
    steps:
      - checkout
      # Download and cache dependencies
      - restore_cache:
          keys:
          - v1-npm-cache-{{ checksum "package.json" }}
          # fallback to using the latest cache if no exact match is found
          - v1-npm-cache-
      - run: npm ci
      - save_cache:
          paths:
            - /root/.npm
          key: v1-npm-cache-{{ checksum "package.json" }}
      - run: npm run lint:ts --silent

  build:
    docker:
      - image: citizenlabdotco/cl2-devops-front-buildenv
    resource_class: medium+
    working_directory: ~/cl2-front
    steps:
      - checkout
      # Download and cache dependencies
      - restore_cache:
          keys:
          - v1-npm-cache-{{ checksum "package.json" }}
          # fallback to using the latest cache if no exact match is found
          - v1-npm-cache-
      - run: npm ci
      - save_cache:
          paths:
            - /root/.npm
          key: v1-npm-cache-{{ checksum "package.json" }}
      - run:
          command: TEST_BUILD="true" npm run build
          no_output_timeout: '30m'

  extract_intl:
    docker:
      - image: citizenlabdotco/cl2-devops-front-buildenv
    working_directory: ~/cl2-front
    steps:
      - checkout
      # Download and cache dependencies
      - restore_cache:
          keys:
          - v1-npm-cache-{{ checksum "package.json" }}
          # fallback to using the latest cache if no exact match is found
          - v1-npm-cache-
      - run: npm ci
      - save_cache:
          paths:
            - /root/.npm
          key: v1-npm-cache-{{ checksum "package.json" }}
      - run: npm run extract-intl
      - run: git add app/translations/*.json
      - run: git config --global user.email "hello@citizenlab.co"
      - run: git config --global user.name "CircleCI"
      - add_ssh_keys:
          fingerprints:
            - "54:03:ca:0f:4e:7a:fc:fa:6e:30:ef:80:2e:da:02:c4"
      - run: git diff --quiet app/translations && git diff --staged --quiet app/translations || git commit -m "Translations updated by CI (extract-intl)"
      - run: git push origin $CIRCLE_BRANCH

  deploy_demo:
    docker:
      - image: citizenlabdotco/cl2-devops-front-buildenv
    resource_class: medium+
    working_directory: ~/cl2-front
    steps:
      - checkout
      # Download and cache dependencies
      - restore_cache:
          keys:
          - v1-npm-cache-{{ checksum "package.json" }}
          # fallback to using the latest cache if no exact match is found
          - v1-npm-cache-
      - run: npm ci
      - save_cache:
          paths:
            - /root/.npm
          key: v1-npm-cache-{{ checksum "package.json" }}
      - run:
          command: SEGMENT_API_KEY=$SEGMENT_API_KEY_STAGING SENTRY_DSN=$SENTRY_DSN_STAGING npm run build:staging
          no_output_timeout: '30m'
      - run:
          command: rm build/*.map
      - deploy:
          name: Deploy to S3 if tests pass and branch is Master
          command: |
            aws s3 sync build/ s3://cl2-front-staging/ --acl public-read --exclude "index.html"
            aws s3 cp build/index.html s3://cl2-front-staging/index.html --acl public-read --cache-control no-cache

  license-check:
    docker:
      - image: licensefinder/license_finder
    working_directory: /scan
    resource_class: small
    steps:
      - checkout
      - restore_cache:
          keys:
          - v1-npm-cache-{{ checksum "package.json" }}
          # fallback to using the latest cache if no exact match is found
          - v1-npm-cache-
      - run: npm ci
      - run: /bin/bash -lc "cd /scan && license_finder"

  # deploy_crowdin:
  #   docker:
  #     - image: citizenlabdotco/cl2-devops-front-buildenv
  #   resource_class: medium+
  #   working_directory: ~/cl2-front
  #   steps:
  #     - checkout
  #     # Download and cache dependencies
  #     - restore_cache:
  #         keys:
  #         - v1-npm-cache-{{ checksum "package.json" }}
  #         # fallback to using the latest cache if no exact match is found
  #         - v1-npm-cache-
  #     - run: npm ci
  #     - save_cache:
  #         paths:
  #           - /root/.npm
  #         key: v1-npm-cache-{{ checksum "package.json" }}
  #     - run:
  #         command: CROWDIN_PLUGIN_ENABLED=true SEGMENT_API_KEY=$SEGMENT_API_KEY_STAGING npm run build:staging
  #         no_output_timeout: '30m'
        # - run:
        #     command: rm build/*.map
  #     - deploy :
  #         name: Deploy translatable version to i18n.stg.citizenlab.co
  #         command: aws s3 sync build/ s3://cl2-front-translations/ --delete --acl public-read

  deploy_production:
    docker:
      - image: citizenlabdotco/cl2-devops-front-buildenv
    resource_class: medium+
    working_directory: ~/cl2-front
    steps:
      - checkout
      # Download and cache dependencies
      - restore_cache:
          keys:
          - v1-npm-cache-{{ checksum "package.json" }}
          # fallback to using the latest cache if no exact match is found
          - v1-npm-cache-
      - run: npm ci
      - save_cache:
          paths:
            - /root/.npm
          key: v1-npm-cache-{{ checksum "package.json" }}
      - run:
          command: SEGMENT_API_KEY=$SEGMENT_API_KEY_PRODUCTION SENTRY_DSN=$SENTRY_DSN_PRODUCTION npm run build
          no_output_timeout: '30m'
      - run:
          command: rm build/*.map
      - deploy :
          name: Deploy production version to benelux cluster
          command: |
            aws s3 sync build/ s3://cl2-front-production-benelux/ --acl public-read --exclude "index.html"
            aws s3 cp build/index.html s3://cl2-front-production-benelux/index.html --acl public-read --cache-control no-cache
      - deploy:
          name: Invalidate the static assets on the CDN
          command: aws cloudfront create-invalidation --distribution-id E2MY732QC516J3 --paths '/*'

  build_deploy_storybook:
    docker:
      - image: citizenlabdotco/cl2-devops-front-buildenv
    resource_class: medium+
    working_directory: ~/cl2-front
    steps:
      - checkout
      # Download and cache dependencies
      - restore_cache:
          keys:
          - v1-npm-cache-{{ checksum "package.json" }}
          # fallback to using the latest cache if no exact match is found
          - v1-npm-cache-
      - run: npm ci
      - save_cache:
          paths:
            - /root/.npm
          key: v1-npm-cache-{{ checksum "package.json" }}
      - run:
          command: npm run build-storybook
          no_output_timeout: '30m'
      - deploy:
          name: Deploy to S3
          command: |
            aws s3 sync .out/ s3://developers.citizenlab.co/components --delete --acl public-read

  reset_ci_tenants:
    docker:
      - image: citizenlabdotco/cl2-devops-front-buildenv
    resource_class: small
    steps:
      - add_ssh_keys:
          fingerprints:
            - "50:78:bd:26:fb:8c:2d:96:38:ac:57:d2:08:46:96:da"
      - run: ssh -o StrictHostKeyChecking=no -l ubuntu 52.29.30.188 "docker run --env-file cl2-deployment/.env-staging --rm citizenlabdotco/cl2-back:master bundle exec rake cl2_back:create_tenant['e2e.stg.citizenlab.co','e2etests_template']"
      - run: ssh -o StrictHostKeyChecking=no -l ubuntu 52.29.30.188 "docker run --env-file cl2-deployment/.env-staging --rm citizenlabdotco/cl2-back:master bundle exec rake cl2_back:create_tenant['pa11y.stg.citizenlab.co','e2etests_template']"



  test_lighthouse:
    docker:
      - image: citizenlabdotco/cl2-devops-front-buildenv
        user: pptruser
    resource_class: small
    working_directory: ~/cl2-front
    steps:
      - checkout
      - run:
          command: npm install lighthouse-ci@1.10.0
      - run:
          command: npx lighthouse-ci@1.10.0 https://demo.stg.citizenlab.co --performance=3 --report=/tmp
      - store_artifacts:
          path: /tmp/report.html
          destination: lighthouse

workflows:
  version: 2
  build-and-deploy:
    jobs:
      - test:
          filters:
            branches:
              ignore:
                - crowdin_master
                - /l10n_.*/
                - master
                - production
      - lint:
          filters:
            branches:
              ignore:
                - crowdin_master
                - /l10n_.*/
                - master
                - production
      - license-check:
          filters:
            branches:
              ignore:
                - crowdin_master
                - /l10n_.*/
      - build:
          filters:
            branches:
              ignore:
                - crowdin_master
                - /l10n_.*/
                - master
                - production
      - extract_intl:
          filters:
            branches:
              ignore:
                - crowdin_master
                - /l10n_.*/
                - master
                - production
      - deploy_demo:
          filters:
            branches:
              only:
                - master
      # - deploy_crowdin:
      #     filters:
      #       branches:
      #         only: master
      - reset_ci_tenants:
          filters:
            branches:
              only:
                - master
      - cypress/run:
          requires:
            - deploy_demo
            - reset_ci_tenants
          command: npx cypress run --spec 'cypress/integration/*.ts' --config baseUrl=https://e2e.stg.citizenlab.co
          store_artifacts: true
          filters:
            branches:
              only:
                - master
      - test_lighthouse:
          requires:
            - deploy_demo
          filters:
            branches:
              only: master
      - deploy_production:
          filters:
            branches:
              only: production
      - build_deploy_storybook:
          filters:
            branches:
              only:
                - production
                - 'CL2-4111-research-UI-component-library'
